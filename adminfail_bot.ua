from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

ADMIN_BOT_TOKEN = '8025761375:AAFy7cXEiTrQUhF7_x3ks6qB6veQAJn_0yc'

bot = Bot(token=ADMIN_BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

orders = []

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è")

def build_admin_kb(index):
    return InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"approve_{index}"),
        InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{index}")
    )

@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    await msg.answer("–ü—Ä–∏–≤—ñ—Ç, –∞–¥–º–∏–Ω–µ!", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def show_orders(msg: types.Message):
    if not orders:
        await msg.answer("–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return
    for i, order in enumerate(orders):
        await msg.answer(order["text"], reply_markup=build_admin_kb(i))

@dp.message_handler(content_types=types.ContentType.TEXT)
async def save_order_from_client_bot(msg: types.Message):
    orders.append({
        "text": msg.text,
        "status": "–æ—á—ñ–∫—É—î",
        "user_msg_id": msg.message_id
    })

@dp.callback_query_handler(lambda c: c.data.startswith("approve_") or c.data.startswith("reject_"))
async def handle_action(callback: types.CallbackQuery):
    action, idx = callback.data.split("_")
    idx = int(idx)
    if idx >= len(orders):
        await callback.answer("‚ùå –ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return

    order = orders[idx]
    status = "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ" if action == "approve" else "‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ"
    orders[idx]["status"] = status

    await callback.message.edit_text(order["text"] + f"\n\nüì¶ –°—Ç–∞—Ç—É—Å: {status}")
    await callback.answer("–û–Ω–æ–≤–ª–µ–Ω–æ")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
